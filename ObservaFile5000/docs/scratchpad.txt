using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Extensions
{
    class Program
    {
        delegate string ConvertMethod(string inString);

        static void Main(string[] args)
        {
            string[] src = new string[] { "563-452-3805", null, "5634523837", "13159465232", "+113159465232", "+222453159465232" };

            foreach (string value in src)
            {
                Console.WriteLine($"Formatted version of {value} is {value.ToPhoneNumber()}");
            }
            
            RunFuncs();

            FuncExampleEntry();

            Console.ReadLine();
        }

        static Func<string, string> convertUsingLambda = s => s.ToUpper(); 
        static Func<string, string> convertUsingAnonymous = delegate (string s) { return s.ToUpper(); };
        static Func<string, string> convertMethod = UppercaseString;
        static Func<int, string> convertIntToString = delegate (int i) { return i.ToString(); };
        static Func<string[], List<string>> convertToStringList = delegate (string[] s) { return s.ToList(); };

        static Func<int, string, string[]> createStringArray = delegate (int n, string str) {
            List<string> results = new List<string>();
            for (int i = 0; i < n; i++)
            {
                results.Add(str + i.ToString());
            }
            return results.ToArray();
        };
        
        static void RunFuncs() {
            https://msdn.microsoft.com/en-us/library/bb549151(v=vs.110).aspx

            string name = "Dakota";
            Console.WriteLine(convertUsingLambda(name));
            Console.WriteLine(convertUsingAnonymous(name));

            // Instantiate delegate to reference UppercaseString method
            ConvertMethod convertMethod = UppercaseString;
            
            // Use delegate instance to call UppercaseString method
            Console.WriteLine(convertMethod(name));

            Console.WriteLine($"Converting 1 to a string says: {convertIntToString(1)}");

            string[] results = createStringArray(4, "mystring");
            foreach (var item in results)
            {
                Console.WriteLine(item);
            }
        }

        private static string UppercaseString(string inputString)
        {
            return inputString.ToUpper();
        }

        private static void FuncExampleEntry() {
            var results = FuncExample_Worker("Rocky Road", SearchForIceCream);
            var results1 = FuncExample_Worker("Frank", SearchHuman);
            var results2 = FuncExample_Worker("Oriole", SearchBird);

            outputToConsole(results, results1, results2);

            var totalResults = results.ToList();
            totalResults.Concat(results1.ToList());
            totalResults.Concat(results2.ToList());

            Console.WriteLine("totalResults says: ");
            foreach (var item in totalResults)
            {
                Console.WriteLine(item);
            }
        }

        static Action<string[], string[], string[]> outputToConsole = delegate (string[] items, string[] items1, string[] items2) {
            if (items == null || items.Count() == 0) return;
            if (items1 == null || items2.Count() == 0) return;
            if (items1 == null || items2.Count() == 0) return;

            Console.WriteLine("In outputToConsole()");
            foreach (var item in items) { Console.WriteLine(item); }
            foreach (var item in items1) { Console.WriteLine(item); }
            foreach (var item in items2) { Console.WriteLine(item); }
        };

        private static string[] FuncExample_Worker(string request, Func<string, string[]> GetResults) {
            var results = GetResults(request);
            return results;
        }

        private static string[] SearchForIceCream(string searchfor) {
            string[] mockDb = new string[] { "Chunky Monkey", "Neopolitan", "Rocky Road", "Chocolate", "Vanilla", "Strawberry" };
            string[] results = mockDb.Where(x => x == searchfor).ToArray();
            return results;
        }

        private static string[] SearchHuman(string searchfor)
        {
            string[] mockDb = new string[] { "Joseph", "Bob", "Larry", "John", "Michael", "Frank" };
            string[] results = mockDb.Where(x => x == searchfor).ToArray();
            return results;
        }

        private static string[] SearchBird(string searchfor)
        {
            string[] mockDb = new string[] { "Sparrow", "Bluejay", "Oriole", "Owl", "Hawk", "Wren" };
            string[] results = mockDb.Where(x => x == searchfor).ToArray();
            return results;
        }
    }
}
